name: Add New Institution

on:
  issues:
    types: [opened]

jobs:
  add-qrcode:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.issue.number }}
      cancel-in-progress: true

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for [addQR] Keyword
        id: check_keyword
        uses: actions/github-script@v7
        with:
          script: |
            const issueTitle = context.payload.issue.title;
            const issueBody = context.payload.issue.body || '';
            
            if (!issueTitle.includes('[addQR]') && !issueBody.includes('[addQR]')) {
              core.setFailed('No [addQR] keyword found. Exiting workflow.');
              return process.exit(78);
            }
            
            console.log('Keyword [addQR] found. Proceeding with workflow.');

      - name: Set up Node.js
        uses: actions/setup-node@v4.2.0
        with:
          node-version: "18"

      - name: Install Dependencies
        run: |
          npm install axios --legacy-peer-deps

      - name: Create Input File
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            // Safely write issue body to file
            fs.writeFileSync('input.data', context.payload.issue.body || '');
            console.log('Input file created successfully');

      - name: Run Extract Fields Script
        id: extract
        run: |
          echo "${{ github.event.issue.number }}"
          node actions/extractFields.js
        env:
          INPUT_FILE: "input.data"
          ISSUE_ID: "${{ github.event.issue.number }}"

      - name: Append Data to institutions.ts
        run: |
          node actions/append_institution.js

      - name: Show Git Diff
        run: |
          echo "Displaying git diff for changes in institutions.ts"
          git diff app/data/institutions.ts
          rm -rf extractedFields.json input.data
          git checkout package.json

      - name: Get Issue Author Details
        id: author
        run: |
          AUTHOR_NAME=$(gh api /users/${{ github.event.issue.user.login }} --jq .name)
          AUTHOR_EMAIL=$(gh api /users/${{ github.event.issue.user.login }} --jq .email)
          AUTHOR_LOGIN="${{ github.event.issue.user.login }}"

          if [ "$AUTHOR_NAME" = "" ]; then
            AUTHOR_NAME="${AUTHOR_LOGIN}"
          fi

          if [ "$AUTHOR_EMAIL" = "" ]; then
            AUTHOR_EMAIL="${AUTHOR_LOGIN}@users.noreply.github.com"
          fi

          echo "name=$AUTHOR_NAME" >> $GITHUB_OUTPUT
          echo "email=$AUTHOR_EMAIL" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create, Commit, and Push New Branch
        id: create_branch
        run: |
          BRANCH_NAME="add-institution-${{ github.event.issue.number }}"
          echo "Creating branch: $BRANCH_NAME"
          git checkout -b "$BRANCH_NAME"
          git config --global user.name "${{ steps.author.outputs.name }}"
          git config --global user.email "${{ steps.author.outputs.email }}"

          git add app/data/institutions.ts
          git commit -m ":memo: add new institution from #${{ github.event.issue.number }}"

          echo "Pushing branch $BRANCH_NAME to origin..."
          git push origin "$BRANCH_NAME" --verbose
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        uses: actions/github-script@v7
        id: create-pr
        with:
          script: |
            // Safely construct PR
            const { owner, repo } = context.repo;
            const issueNumber = context.payload.issue.number;
            
            // Create a simple, sanitized PR body 
            const prBody = `Closes #${issueNumber}
            
            Automated PR created by the Add New Institution workflow.`;
            
            try {
              const pr = await github.rest.pulls.create({
                owner,
                repo,
                title: `:memo: add new institution from #${issueNumber}`,
                body: prBody,
                head: `add-institution-${issueNumber}`,
                base: 'main'
              });
              
              // Add labels to the PR
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: pr.data.number,
                labels: ['new-institution', 'automated-pr']
              });
              
              console.log(`PR created: ${pr.data.html_url}`);
              return pr.data.number;
            } catch (error) {
              core.setFailed(`Failed to create PR: ${error.message}`);
              throw error;
            }

      - name: Comment on Issue
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = context.payload.issue.number;
            const prNumber = steps['create-pr'].outputs.result;
            
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: issueNumber,
              body: `Thank you for your contribution! A PR has been created #${prNumber} to add this institution.`
            });
