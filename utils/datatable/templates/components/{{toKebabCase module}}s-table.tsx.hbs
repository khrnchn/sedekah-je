"use client"

import { {{module}}s, type {{toPascalCase module}} } from "@/db/schema"
import type {
DataTableAdvancedFilterField,
DataTableFilterField,
DataTableRowAction,
} from "@/types"
import * as React from "react"

import { DataTable } from "@/components/data-table/data-table"
import { DataTableAdvancedToolbar } from "@/components/data-table/data-table-advanced-toolbar"
import { DataTableToolbar } from "@/components/data-table/data-table-toolbar"
import { useDataTable } from "@/hooks/use-data-table"
import { toSentenceCase, toTitleCase } from "@/lib/utils"

import type {
get{{toPascalCase module}}StatusCounts,
get{{toPascalCase module}}s,
} from "../_lib/queries"

import { getDeliveryStatusIcon } from "../_lib/utils"
import { Delete{{toPascalCase module}}sDialog } from "./delete-{{module}}s-dialog"
import { useFeatureFlags } from "../../../../../components/data-table/feature-flags-provider"
import { getColumns } from "./{{module}}s-table-columns"
import { {{toPascalCase module}}sTableFloatingBar } from "./{{module}}s-table-floating-bar"
import { {{toPascalCase module}}sTableToolbarActions } from "./{{module}}s-table-toolbar-actions"
import { Update{{toPascalCase module}}Sheet } from "./update-{{module}}s-sheet"

interface {{toPascalCase module}}sTableProps {
promises: Promise< [ Awaited<ReturnType<typeof get{{toPascalCase module}}s>>,
  Awaited<ReturnType<typeof get{{toPascalCase module}}StatusCounts>>,
    ]
    >
    }

    export function {{toPascalCase module}}sTable({ promises }: {{toPascalCase module}}sTableProps) {
    const { featureFlags } = useFeatureFlags()

    const [{ data, pageCount }, statusCounts] =
    React.use(promises)

    const [rowAction, setRowAction] =
    React.useState<DataTableRowAction<{{toPascalCase module}}> | null>(null)

      const columns = React.useMemo(
      () => getColumns({ setRowAction }),
      [setRowAction]
      )

      /**
      * This component can render either a faceted filter or a search filter based on the `options` prop.
      *
      * @prop options - An array of objects, each representing a filter option. If provided, a faceted filter is
      rendered. If not, a search filter is rendered.
      *
      * Each `option` object has the following properties:
      * @prop {string} label - The label for the filter option.
      * @prop {string} value - The value for the filter option.
      * @prop {React.ReactNode} [icon] - An optional icon to display next to the label.
      * @prop {boolean} [withCount] - An optional boolean to display the count of the filter option.
      */
      const filterFields: DataTableFilterField<{{toPascalCase module}}>[] = [
        // for normal searching, this only works on string columns
        {
        id: "{{module}}Number",
        label: "{{toPascalCase module}} Number",
        placeholder: "Filter {{module}} number...",
        },
        {
        id: "deliveryStatus",
        label: "Delivery Status",
        options: {{module}}s.deliveryStatus.enumValues.map((status) => ({
        label: toPascalCase(status),
        value: status,
        icon: getDeliveryStatusIcon(status),
        count: statusCounts[status],
        })),
        },
        ]

        /**
        * Advanced filter fields for the data table.
        * These fields provide more complex filtering options compared to the regular filterFields.
        *
        * Key differences from regular filterFields:
        * 1. More field types: Includes 'text', 'multi-select', 'date', and 'boolean'.
        * 2. Enhanced flexibility: Allows for more precise and varied filtering options.
        * 3. Used with DataTableAdvancedToolbar: Enables a more sophisticated filtering UI.
        * 4. Date and boolean types: Adds support for filtering by date ranges and boolean values.
        */
        const advancedFilterFields: DataTableAdvancedFilterField<{{toPascalCase module}}>[] = [
          {
          id: "{{module}}Number",
          label: "{{toPascalCase module}} Number",
          type: "number",
          },
          {
          id: "deliveryStatus",
          label: "Delivery Status",
          type: "multi-select",
          options: {{module}}s.deliveryStatus.enumValues.map((status) => ({
          label: toSentenceCase(status),
          value: status,
          icon: getDeliveryStatusIcon(status),
          count: statusCounts[status],
          })),
          },
          {
          id: "createdAt",
          label: "Created at",
          type: "date",
          },
          ]

          const enableAdvancedTable = featureFlags.includes("advancedTable")
          const enableFloatingBar = featureFlags.includes("floatingBar")

          const { table } = useDataTable({
          data,
          columns,
          pageCount,
          filterFields,
          enableAdvancedFilter: enableAdvancedTable,
          initialState: {
          sorting: [{ id: "createdAt", desc: true }],
          columnPinning: { right: ["actions"] },
          },
          getRowId: (originalRow, index) => `${originalRow.id}-${index}`,
          shallow: false,
          clearOnDefault: true,
          })

          return (
          <>
            <DataTable table={table} floatingBar={ enableFloatingBar ? <{{toPascalCase module}}sTableFloatingBar
              table={table} /> : null
            }
            >
            {enableAdvancedTable ? (
            <DataTableAdvancedToolbar table={table} filterFields={advancedFilterFields} shallow={false}>
              <{{toPascalCase module}}sTableToolbarActions table={table} />
            </DataTableAdvancedToolbar>
            ) : (
            <DataTableToolbar table={table} filterFields={filterFields}>
              <{{toPascalCase module}}sTableToolbarActions table={table} />
            </DataTableToolbar>
            )}
            </DataTable>
            <Update{{toPascalCase module}}Sheet open={rowAction?.type==="update" } onOpenChange={()=>
              setRowAction(null)}
              {{module}}={rowAction?.row.original ?? null}
              />
              <Delete{{toPascalCase module}}sDialog open={rowAction?.type==="delete" } onOpenChange={()=>
                setRowAction(null)}
                {{module}}s={rowAction?.row.original ? [rowAction?.row.original] : []}
                showTrigger={false}
                onSuccess={() => rowAction?.row.toggleSelected(false)}
                />
          </>
          )
          }